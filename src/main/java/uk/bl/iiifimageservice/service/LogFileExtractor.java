/**
* Copyright (c) 2014, The British Library Board
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
* Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer 
*   in the documentation and/or other materials provided with the distribution.
* Neither the name of The British Library nor the names of its contributors may be used to endorse or promote products
*   derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
*   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
*   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, 
*   OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
*   OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
*   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
*   EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package uk.bl.iiifimageservice.service;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import uk.bl.iiifimageservice.domain.ImageFormat;
import uk.bl.iiifimageservice.domain.ImageMetadata;
import uk.bl.iiifimageservice.domain.ImageQuality;
import uk.bl.iiifimageservice.util.TextDisplayHelper;

/**
 * Extracts image metadata from the log file generated by kdu_expand
 * 
 * 
 * @author pblake
 * 
 */
@Service
public class LogFileExtractor {

    private final static Pattern sizePattern = Pattern.compile("Ssize=\\{(\\d+),(\\d+)\\}");
    private final static Pattern tilesPattern = Pattern.compile("Stiles=\\{(\\d+),(\\d+)\\}");
    private final static Pattern levelsPattern = Pattern.compile("Clevels=(\\d+)");
    private static final Logger log = LoggerFactory.getLogger(LogFileExtractor.class);

    @Resource
    private TextDisplayHelper textDisplayHelper;

    public ImageMetadata extractImageMetadata(String identifier, String logFile, String complianceLevel) {

        ImageMetadata imageMetadata = new ImageMetadata();
        imageMetadata.setIdentifier(identifier);

        Matcher sizeMatcher = sizePattern.matcher(logFile);
        if (sizeMatcher.find()) {
            imageMetadata.setHeight(Integer.valueOf(sizeMatcher.group(1)));
            imageMetadata.setWidth(Integer.valueOf(sizeMatcher.group(2)));
        }

        Matcher tilesMatcher = tilesPattern.matcher(logFile);
        if (tilesMatcher.find()) {
            imageMetadata.setTileHeight(Integer.valueOf(tilesMatcher.group(1)));
            imageMetadata.setTileWidth(Integer.valueOf(tilesMatcher.group(2)));
        }

        // scale_factors is value of Clevels from log file
        imageMetadata.setScaleFactors(extractScaleFactors(logFile));

        imageMetadata.setFormats(textDisplayHelper.getDisplayValuesFrom(ImageFormat.values()));

        imageMetadata.setQualities(textDisplayHelper.getDisplayValuesFrom(ImageQuality.values()));

        imageMetadata.setProfile(complianceLevel);

        log.debug("Scraped from log file [" + imageMetadata + "]");
        return imageMetadata;
    }

    private List<Integer> extractScaleFactors(String logFile) {

        Integer levels = null;
        Matcher levelsMatcher = levelsPattern.matcher(logFile);
        if (levelsMatcher.find()) {
            levels = Integer.valueOf(levelsMatcher.group(1));
        }
        log.debug("levels value from log file [" + levels + "]");

        List<Integer> scaleFactors = new ArrayList<>();
        scaleFactors.add(1);
        for (int i = 1; i < levels; i++) {
            scaleFactors.add((int) Math.pow(2, i));
        }

        return scaleFactors;

    }

}
